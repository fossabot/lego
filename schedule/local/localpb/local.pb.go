// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schedule/local/localpb/local.proto

/*
Package local is a generated protocol buffer package.

It is generated from these files:
	schedule/local/localpb/local.proto

It has these top-level messages:
	Partition
	Checkpoint
	Job
	JobOptions
	Event
*/
package local

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A Partition stores event keys within a specific time range
type Partition struct {
	From int64    `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To   int64    `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Keys []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (m *Partition) String() string            { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Partition) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Partition) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Partition) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Checkpoint stores a time range. It is used to store the last load performed
// as a checkpoint to resume processing where it was left off.
type Checkpoint struct {
	From int64 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To   int64 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Checkpoint) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Checkpoint) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

// A Job is a one-time task definition
type Job struct {
	Id      string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Target  string      `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Due     int64       `protobuf:"varint,3,opt,name=due" json:"due,omitempty"`
	Data    []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Options *JobOptions `protobuf:"bytes,15,opt,name=options" json:"options,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Job) GetDue() int64 {
	if m != nil {
		return m.Due
	}
	return 0
}

func (m *Job) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Job) GetOptions() *JobOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// JobOptions contains job execution options
type JobOptions struct {
	RetryLimit uint32 `protobuf:"varint,1,opt,name=retryLimit" json:"retryLimit,omitempty"`
	MinBackOff int64  `protobuf:"varint,2,opt,name=minBackOff" json:"minBackOff,omitempty"`
	MaxBackOff int64  `protobuf:"varint,3,opt,name=maxBackOff" json:"maxBackOff,omitempty"`
	AgeLimit   int64  `protobuf:"varint,4,opt,name=ageLimit" json:"ageLimit,omitempty"`
}

func (m *JobOptions) Reset()                    { *m = JobOptions{} }
func (m *JobOptions) String() string            { return proto.CompactTextString(m) }
func (*JobOptions) ProtoMessage()               {}
func (*JobOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobOptions) GetRetryLimit() uint32 {
	if m != nil {
		return m.RetryLimit
	}
	return 0
}

func (m *JobOptions) GetMinBackOff() int64 {
	if m != nil {
		return m.MinBackOff
	}
	return 0
}

func (m *JobOptions) GetMaxBackOff() int64 {
	if m != nil {
		return m.MaxBackOff
	}
	return 0
}

func (m *JobOptions) GetAgeLimit() int64 {
	if m != nil {
		return m.AgeLimit
	}
	return 0
}

// An Event is an occurence of a job executed at a specific time.
// There is one event per job execution.
type Event struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Due     int64  `protobuf:"varint,2,opt,name=due" json:"due,omitempty"`
	Attempt uint32 `protobuf:"varint,3,opt,name=attempt" json:"attempt,omitempty"`
	Job     *Job   `protobuf:"bytes,15,opt,name=job" json:"job,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetDue() int64 {
	if m != nil {
		return m.Due
	}
	return 0
}

func (m *Event) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *Event) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func init() {
	proto.RegisterType((*Partition)(nil), "local.Partition")
	proto.RegisterType((*Checkpoint)(nil), "local.Checkpoint")
	proto.RegisterType((*Job)(nil), "local.Job")
	proto.RegisterType((*JobOptions)(nil), "local.JobOptions")
	proto.RegisterType((*Event)(nil), "local.Event")
}

func init() { proto.RegisterFile("schedule/local/localpb/local.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0xa6, 0xcd, 0x7e, 0xec, 0xd1, 0xf9, 0x93, 0x0b, 0x09, 0x22, 0x52, 0x7a, 0x55, 0x10, 0xa6,
	0xe8, 0x1b, 0x38, 0xbc, 0x19, 0xc2, 0x24, 0x6f, 0x90, 0xb6, 0xd9, 0x16, 0xb7, 0x36, 0x25, 0x3b,
	0x13, 0x77, 0xe7, 0xa5, 0x8f, 0x2d, 0x39, 0xed, 0xd6, 0x81, 0x37, 0xde, 0xb4, 0xdf, 0x1f, 0xe7,
	0xe4, 0x4b, 0x20, 0xd9, 0xe4, 0x4b, 0x5d, 0x6c, 0xd7, 0xfa, 0x61, 0x6d, 0x73, 0xb5, 0x6e, 0xbe,
	0x75, 0xd6, 0xfc, 0xc7, 0xb5, 0xb3, 0x68, 0x79, 0x9f, 0x48, 0x32, 0x81, 0xe8, 0x5d, 0x39, 0x34,
	0x68, 0x6c, 0xc5, 0x39, 0xf4, 0xe6, 0xce, 0x96, 0x22, 0x88, 0x83, 0x94, 0x49, 0xc2, 0xfc, 0x1c,
	0x42, 0xb4, 0x22, 0x24, 0x25, 0x44, 0xeb, 0x33, 0x2b, 0xbd, 0xdb, 0x08, 0x16, 0xb3, 0x34, 0x92,
	0x84, 0x93, 0x47, 0x80, 0xc9, 0x52, 0xe7, 0xab, 0xda, 0x9a, 0x0a, 0xff, 0x33, 0x25, 0xf9, 0x0e,
	0x80, 0x4d, 0x6d, 0xe6, 0x75, 0x53, 0x50, 0x32, 0x92, 0xa1, 0x29, 0xf8, 0x35, 0x0c, 0x50, 0xb9,
	0x85, 0x46, 0xca, 0x46, 0xb2, 0x65, 0xfc, 0x12, 0x58, 0xb1, 0xd5, 0x82, 0xd1, 0x00, 0x0f, 0xfd,
	0x96, 0x42, 0xa1, 0x12, 0xbd, 0x38, 0x48, 0xcf, 0x24, 0x61, 0x7e, 0x0f, 0x43, 0x5b, 0xfb, 0x26,
	0x1b, 0x71, 0x11, 0x07, 0xe9, 0xe9, 0xd3, 0xd5, 0xb8, 0xa9, 0x3c, 0xb5, 0xd9, 0xac, 0x31, 0xe4,
	0x3e, 0x91, 0xfc, 0x04, 0x00, 0x9d, 0xce, 0xef, 0x00, 0x9c, 0x46, 0xb7, 0x7b, 0x33, 0xa5, 0x41,
	0x3a, 0xd1, 0x48, 0x1e, 0x29, 0xde, 0x2f, 0x4d, 0xf5, 0xa2, 0xf2, 0xd5, 0x6c, 0x3e, 0x6f, 0x9b,
	0x1c, 0x29, 0xe4, 0xab, 0xaf, 0xbd, 0xcf, 0x5a, 0xff, 0xa0, 0xf0, 0x1b, 0x38, 0x51, 0x0b, 0xdd,
	0x4c, 0xef, 0x91, 0x7b, 0xe0, 0x89, 0x82, 0xfe, 0xeb, 0xa7, 0xae, 0xf0, 0xcf, 0x75, 0xb4, 0xb5,
	0xc3, 0xae, 0xb6, 0x80, 0xa1, 0x42, 0xd4, 0x65, 0x8d, 0xb4, 0x63, 0x24, 0xf7, 0x94, 0xdf, 0x02,
	0xfb, 0xb0, 0x59, 0x5b, 0x1c, 0xba, 0xe2, 0xd2, 0xcb, 0xd9, 0x80, 0x5e, 0xfd, 0xf9, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0x01, 0xf2, 0x70, 0x1b, 0x02, 0x00, 0x00,
}
